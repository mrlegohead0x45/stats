var searchIndex = JSON.parse('{\
"stats_traits":{"doc":"Library for calculating statistics on collections of …","t":[13,13,8,8,2,8,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,12,12,6],"n":["CouldNotConvert","EmptyCollection","FrequencyStats","NumExt","Result","Stats","StatsError","borrow","borrow_mut","count","count","count","count","eq","fmt","from","into","mean","mean","mean","mean","non_zero_count","non_zero_count","non_zero_count_as_item","non_zero_count_as_item","std_dev","std_dev","sum","sum","sum","sum","try_from","try_into","type_id","types","variance","variance","variance","variance","from","to","Result"],"q":["stats_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","stats_traits::StatsError","","stats_traits::types"],"d":["Could not convert between data types","Could not be calculated because the collection was empty","Similar to <code>Stats</code>, but for collections of tuples containing …","Trait for a number-like type that we can calculate …","","A trait to be implemented for collection-like types that …","Error type for the crate","","","","","Count the items in the collection","Count the items in the collection","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Find the mean of the collection","Find the mean of the collection","Count the items in the collection, returning …","Count the items in the collection, returning …","Count the items in the collection and convert the result …","Count the items in the collection and convert the result …","Find the standard deviation of the collection. The …","Find the standard deviation of the collection. The …","","","Calculate the sum of all the items in the collection","Calculate the sum of all the items in the collection","","","","Module with type aliases","","","Find the variance of the collection. The variance is the …","Find the variance of the collection. The variance is the …","Data type the conversion was attempted from","Data type the conversion was attempted to","Type alias for a <code>Result</code> with the error type set to …"],"i":[2,2,0,0,0,0,0,2,2,9,9,10,10,2,2,2,2,9,9,10,10,10,10,10,10,10,10,9,9,10,10,2,2,2,0,9,9,10,10,11,11,0],"f":[0,0,0,0,0,0,0,[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[2,2],3],[[2,4],5],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],[[6,[1]]]],[[],[[6,[1]]]],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],8],0,[[]],[[]],[[],6],[[],6],0,0,0],"p":[[15,"usize"],[4,"StatsError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"FrequencyStats"],[8,"Stats"],[13,"CouldNotConvert"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
